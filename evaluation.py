import chess
from pprint import pprint

def create_fields():
	return [(col + row) for col in "ABCDEFGH" for row in "12345678"]

fields = create_fields()

def field_to_coords(field):
    x, y = field[0], field[1]

    col = "ABCDEFGH".find(x)
    row = 8 - int(y)

    return(row,col)

pawn = [
        [0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0],
        [80.0,  80.0,  80.0,  80.0,  80.0,  80.0,  80.0,  80.0],
        [20.0,  20.0,  20.0,  50.0,  50.0,  20.0,  20.0,  20.0],
        [5.0,  5.0,  10.0,  25.0,  25.0,  10.0,  5.0,  5.0],
        [0.0,  0.0,  0.0,  20.0,  20.0,  0.0,  0.0,  0.0],
        [5.0,   0.0, -10.0,  0.0,  0.0, -10.0, -5.0,  5.0],
        [5.0,  10.0, 10.0,  -20.0, -20.0,  10.0,  10.0,  5.0],
        [0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0]
    ];

knight = [
        [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0],
        [-4.0, -2.0,  0.0,  0.0,  0.0,  0.0, -2.0, -4.0],
        [-3.0,  0.0,  1.0,  1.5,  1.5,  1.0,  0.0, -3.0],
        [-3.0,  0.5,  1.5,  2.0,  2.0,  1.5,  0.5, -3.0],
        [-3.0,  0.0,  1.5,  2.0,  2.0,  1.5,  0.0, -3.0],
        [-3.0,  0.5,  1.0,  1.5,  1.5,  1.0,  0.5, -3.0],
        [-4.0, -2.0,  0.0,  0.5,  0.5,  0.0, -2.0, -4.0],
        [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0]
]

bishop = [
    [ -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0],
    [ -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0],
    [ -1.0,  0.0,  0.5,  1.0,  1.0,  0.5,  0.0, -1.0],
    [ -1.0,  0.5,  0.5,  1.0,  1.0,  0.5,  0.5, -1.0],
    [ -1.0,  0.0,  1.0,  1.0,  1.0,  1.0,  0.0, -1.0],
    [ -1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0, -1.0],
    [ -1.0,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5, -1.0],
    [ -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0]
]

rook = [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
 [5.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 5.0],
 [-5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -5.0],
 [-5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -5.0],
 [-5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -5.0],
 [-5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -5.0],
 [-5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -5.0],
 [0.0, 0.0, 0.0, 5.0, 5.0, 0.0, 0.0, 0.0]]

queen = [[-20.0, -10.0, -10.0, -5.0, -5.0, -10.0, -10.0, -20.0],
 [-10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -10.0],
 [-10.0, 0.0, 5.0, 5.0, 5.0, 5.0, 0.0, -10.0],
 [-5.0, 0.0, 5.0, 5.0, 5.0, 5.0, 0.0, -5.0],
 [0.0, 0.0, 5.0, 5.0, 5.0, 5.0, 0.0, -5.0],
 [-10.0, 5.0, 5.0, 5.0, 5.0, 5.0, 0.0, -10.0],
 [-10.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, -10.0],
 [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]

king = [[-30.0, -40.0, -40.0, -50.0, -50.0, -40.0, -40.0, -30.0],
 [-30.0, -40.0, -40.0, -50.0, -50.0, -40.0, -40.0, -30.0],
 [-30.0, -40.0, -40.0, -50.0, -50.0, -40.0, -40.0, -30.0],
 [-30.0, -40.0, -40.0, -50.0, -50.0, -40.0, -40.0, -30.0],
 [-20.0, -30.0, -30.0, -40.0, -40.0, -30.0, -30.0, -20.0],
 [-10.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -10.0],
 [20.0, 20.0, -20.0, -50.0, -50.0, -20.0, 20.0, 20.0],
 [10.0, 30.0, 0.0, 0.0, 0.0, 0.0, 30.0, 10.0]]

king_koth = [[-30.0, -40.0, -40.0, -50.0, -50.0, -40.0, -40.0, -30.0],
 [-30.0, -40.0, -40.0, -50.0, -50.0, -40.0, -40.0, -30.0],
 [-30.0, -40.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0],
 [-30.0, -40.0, 50.0, 10000.0, 100000.0, 100.0, 50.0, -30.0],
 [-20.0, -30.0, 50.0, 10000.0, 100000.0, 100.0, -30.0, -20.0],
 [-10.0, -20.0, 20.0, 20.0, 20.0, 20.0, -20.0, -10.0],
 [20.0, 20.0, -20.0, -50.0, -50.0, -20.0, 20.0, 20.0],
 [10.0, 30.0, 0.0, 0.0, 0.0, 0.0, 30.0, 10.0]]

values = {
    "p": pawn,
    "n": knight,
    "b": bishop,
    "r": rook,
    "q": queen,
    "k": king
}

koth_values = {
    "p": pawn,
    "n": knight,
    "b": bishop,
    "r": rook,
    "q": queen,
    "k": king_koth
}

def get_piece_value(piece):
    piece_score = {
        "p": 100,
        "n": 350,
        "b": 370,
        "r": 525,
        "q": 1000,
        "k": 1000000
    }

    value = piece_score.get(piece.lower())

    if (piece.islower()):
        return -value

    return value

def evaluate(node, variant):
    score = 0

    for field in fields:
        piece = node.piece_at(getattr(chess, field))

        if piece:
            p = str(piece)
            score += get_piece_value(p)

            field_coords = field_to_coords(field)

            piece_value = values[p.lower()]

            if p.islower():
                piece_value = values[p.lower()][::-1]

            if variant == 'kingOfTheHill':
                piece_value = koth_values[p.lower()]

            if variant == 'kingOfTheHill' and p.islower():
                piece_value = koth_values[p.lower()][::-1]

            if p.islower():
                score -= piece_value[field_coords[0]][field_coords[1]]
            else:
                score += piece_value[field_coords[0]][field_coords[1]]

    return score
